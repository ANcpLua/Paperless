name: Dockerized CI with Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          DOCKER_COMPOSE_VERSION=2.20.2
          curl -L "https://github.com/docker/compose/releases/download/v${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" \
               -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          docker-compose version
        shell: bash

      - name: Start Docker Services
        run: |
          docker compose -f compose.yaml up --build -d
        shell: bash

      - name: Wait for containers to become healthy
        run: |
          # Adjust this count if you have more or fewer containers with healthchecks
          WAIT_FOR_HEALTHY_COUNT=7 
          TIMEOUT=120
          INTERVAL=5

          echo "Waiting up to $TIMEOUT seconds for all containers to be healthy..."
          end=$((SECONDS+TIMEOUT))

          while [ $SECONDS -lt $end ]; do
            healthy_count=$(docker ps --filter "health=healthy" --format '{{.Names}}' | wc -l)
            if [ "$healthy_count" -eq "$WAIT_FOR_HEALTHY_COUNT" ]; then
              echo "All $WAIT_FOR_HEALTHY_COUNT containers are healthy!"
              break
            else
              echo "Currently $healthy_count healthy containers. Waiting..."
              sleep $INTERVAL
            fi
          done

          final_healthy_count=$(docker ps --filter "health=healthy" --format '{{.Names}}' | wc -l)
          if [ "$final_healthy_count" -ne "$WAIT_FOR_HEALTHY_COUNT" ]; then
            echo "Not all containers became healthy in time."
            docker ps
            exit 1
          fi
        shell: bash

      - name: Restore .NET Dependencies
        run: dotnet restore
        shell: bash

      - name: Build .NET Solution
        run: dotnet build --no-restore --configuration Debug
        shell: bash

      - name: Run Tests
        run: dotnet test --no-build --configuration Debug --verbosity normal
        shell: bash

      - name: Cleanup Docker Services
        if: always()
        run: docker compose -f compose.yaml down --volumes
        shell: bash
