@page "/documents"
@inject IDocumentService DocumentService
@inject NavigationManager Navigation
@implements IDisposable

<PageTitle>Document Management</PageTitle>

@if (message != null)
{
<div class="alert alert-info">
    @message
</div>
}

<div class="container-fluid p-4">
    <div class="row mb-4">
        <div class="col">
            <div class="card shadow-sm">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h5 class="card-title mb-0">Document Management</h5>
                    </div>

                    <div class="input-group mb-3">
                        <InputFile OnChange="OnFileSelected"
                                   class="form-control"
                                   accept=".pdf,.doc,.docx" />
                        <button class="btn btn-primary"
                                @onclick="UploadFile"
                                disabled="@(selectedFile is null)">
                            <i class="bi bi-upload"></i> Upload
                        </button>
                    </div>

                    @if (selectedFile is not null)
                    {
                    <div class="alert alert-info">
                        <i class="bi bi-file-earmark"></i>
                        Selected: @selectedFile.File.Name
                    </div>
                    }

                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="table-light">
                            <tr>
                                <th><i class="bi bi-file-text"></i> Title</th>
                                <th><i class="bi bi-file-earmark"></i> File Name</th>
                                <th><i class="bi bi-calendar"></i> Upload Date</th>
                                <th><i class="bi bi-gear"></i> Actions</th>
                            </tr>
                            </thead>
                            <tbody>
                            @if (documents?.Any() != true)
                            {
                            <tr>
                                <td colspan="4" class="text-center">
                                    <i class="bi bi-info-circle"></i> No documents found
                                </td>
                            </tr>
                            }
                            else
                            {
                            @foreach (var doc in documents)
                            {
                            <tr>
                                <td>@doc.Title</td>
                                <td>@doc.FileName</td>
                                <td>@doc.UploadDate.ToLocalTime().ToString("g")</td>
                                <td>
                                    <div class="btn-group">
                                        <button class="btn btn-sm btn-outline-primary"
                                                @onclick="() => ViewDocument(doc.Id)">
                                            <i class="bi bi-eye"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger"
                                                @onclick="() => DeleteDocument(doc.Id)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                            }
                            }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (showToast)
    {
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div class="toast show align-items-center text-white bg-@toastType border-0"
             role="alert"
             aria-live="assertive"
             aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    <i class="bi @(toastType == "success" ? "bi-check-circle" : "bi-exclamation-circle")"></i>
                    @toastMessage
                </div>
                <button type="button"
                        class="btn-close btn-close-white me-2 m-auto"
                        @onclick="() => showToast = false">
                </button>
            </div>
        </div>
    </div>
    }
</div>

@code {
    private IEnumerable<Document> documents = Array.Empty<Document>();
    private string? message;
    private bool showToast;
    private string toastMessage = "";
    private string toastType = "success";
    private InputFileChangeEventArgs? selectedFile;

    protected override async Task OnInitializedAsync()
    {
        await LoadDocuments();
    }

    private async Task LoadDocuments()
    {
        try
        {
        }
        catch (Exception ex)
        {
            message = $"Error loading documents: {ex.Message}";
            documents = Array.Empty<Document>();
        }
        StateHasChanged();
    }

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e;
        StateHasChanged();
    }

    private async Task UploadFile()
    {
        if (selectedFile?.File is null) return;

        try
        {
            ShowToast("Document uploaded successfully", "success");
            selectedFile = null;
            await LoadDocuments();
        }
        catch (Exception ex)
        {
            ShowToast($"Error uploading file: {ex.Message}", "danger");
        }
    }

    private void ViewDocument(int id)
    {
        Navigation.NavigateTo($"/documents/{id}");
    }

    private async Task DeleteDocument(int id)
    {
        try
        {
            ShowToast("Document deleted successfully", "success");
            await LoadDocuments();
        }
        catch (Exception ex)
        {
            ShowToast($"Error deleting document: {ex.Message}", "danger");
        }
    }

    private void ShowToast(string text, string type)
    {
        toastMessage = text;
        toastType = type;
        showToast = true;
        StartToastTimer();
    }

    private void StartToastTimer()
    {
        var timer = new System.Timers.Timer(5000);
        timer.Elapsed += (sender, e) => {
            InvokeAsync(() => {
                showToast = false;
                StateHasChanged();
                timer.Dispose();
            });
        };
        timer.Start();
    }

    public void Dispose()
    {
        GC.SuppressFinalize(this);
    }
}